# By gogongxt

# After change ~/.config/tmux/tmux.conf, It's best to kill tmux and restart it to make the change take effect.
# $tmux kill-server && tmux || tmux

# If you cannot start tmux, use following cmd to kill tmux completely and then restart tmux
# $pkill -9 tmux

# If first use this config. It's necessary to download tmp manually.
# if you use my whole dotfiles with tmux, the tpm is exist and no need to download again.
# https://github.com/tmux-plugins/tpm
# How to use tmp to manager plugins:
# 1. prefix+I install plugins
# 2. prefix+U update plugins
# 3. prefix+Alt+u remove plugins that not used

set -g mouse on

# add for support image show in tmux
set -gq allow-passthrough on
set -g visual-activity off

# Notice that whatever config the color:
# Please make sure three points:
# 1.You can use Italic font
# 2.Background color and highlight show find. Compare to use alacritty without tmux.
# 3.You can use home and end. If you cannot but the aboves are normal, you can remap home and end below.
set -g default-terminal "screen-256color"
set-option -g default-terminal "tmux-256color" 
set -ga terminal-overrides ",xterm-256color:Tc"
set -as terminal-overrides ',xterm*:sitm=\E[3m'

# solve bug that macos cannot change miniconda python3
# https://stackoverflow.com/questions/57660263/tmux-recognised-conda-env-but-still-use-the-default-python
if-shell 'test "$(uname)" = "Darwin"' 'set -g default-command "/bin/zsh"'

# Becase set the 256color. Cause home and end cannot use. Please remap them.
# bind-key -n Home send Escape "OH"
# bind-key -n End send Escape "OF"

# Share clipboard with system
set-option -g set-clipboard on

# size windows based on clients looking at that window
setw -g aggressive-resize on

#🔽🔽🔽
# TMUX color config
# tmux color https://i.stack.imgur.com/e63et.png
set -g mode-style "fg=default,bg=default,reverse"
set -g status-bg color147
set -g status-fg white
set -g pane-border-style fg=default      
set -ga pane-border-style bg=color147
set -g pane-active-border-style fg=black
set -ga pane-active-border-style bg=yellow
set -g message-style bg=black,fg=orange
#🔼🔼🔼

SCRIPTS_PATH="$HOME/.config/tmux/scripts"

# reload the $HOME/.config/tmux/tmux.conf file with prefix+Ctrl-a
bind-key C-a source-file ~/.config/tmux/tmux.conf \; display-message "configuration reloaded"

# tmux detach current session and back to ordinary bash
bind-key d detach-client

# set the prefix
# unbind C-b
# set -g prefix C-a

# set pane
set -g pane-border-status top
set -g pane-border-format "#P #T"

# select pane
bind -n C-k select-pane -U
bind -n C-j select-pane -D
bind -n C-h select-pane -L
bind -n C-l select-pane -R

# select pane
bind-key k select-pane -U
bind-key j select-pane -D
bind-key h select-pane -L
bind-key l select-pane -R

# keymap like vim C-w shift+hjkl to swap pane or change split method
bind-key H run-shell "$SCRIPTS_PATH/smart-move.sh H"
bind-key J run-shell "$SCRIPTS_PATH/smart-move.sh J"
bind-key K run-shell "$SCRIPTS_PATH/smart-move.sh K"
bind-key L run-shell "$SCRIPTS_PATH/smart-move.sh L"

# copy-mode-vi
set-window-option -g mode-keys vi
# use cmd{ :list-keys -T copy-mode-vi } to show the full table of commands in copy mode.
# ref: https://superuser.com/questions/395158/tmux-copy-mode-select-text-block
bind-key y copy-mode    # enter copy mode
bind-key / copy-mode \; send-key "/" # enter copy mode and enable search
# bind p paste-buffer     # paste content

# ref: https://github.com/kite12580/.vim/blob/main/config/.tmux.conf
bind -T copy-mode-vi i switch-client -T copyModeMultiKey_i
bind -T copyModeMultiKey_i w send-keys -X select-word
bind -T copyModeMultiKey_i W send-keys -X clear-selection \; send-keys -X previous-space \; send-keys -X begin-selection \; send-keys -X next-space-end
bind -T copyModeMultiKey_i b send-keys -X clear-selection \; send-keys -X jump-to-backward '(' \; send-keys -X begin-selection \; send-keys -X jump-to-forward ')'
bind -T copyModeMultiKey_i ( send-keys -X clear-selection \; send-keys -X jump-to-backward '(' \; send-keys -X begin-selection \; send-keys -X jump-to-forward ')'
bind -T copyModeMultiKey_i ) send-keys -X clear-selection \; send-keys -X jump-to-backward '(' \; send-keys -X begin-selection \; send-keys -X jump-to-forward ')'
bind -T copyModeMultiKey_i B send-keys -X clear-selection \; send-keys -X jump-to-backward '{' \; send-keys -X begin-selection \; send-keys -X jump-to-forward '}'
bind -T copyModeMultiKey_i \{ send-keys -X clear-selection \; send-keys -X jump-to-backward '{' \; send-keys -X begin-selection \; send-keys -X jump-to-forward '}'
bind -T copyModeMultiKey_i \} send-keys -X clear-selection \; send-keys -X jump-to-backward '{' \; send-keys -X begin-selection \; send-keys -X jump-to-forward '}'
bind -T copyModeMultiKey_i [ send-keys -X clear-selection \; send-keys -X jump-to-backward '[' \; send-keys -X begin-selection \; send-keys -X jump-to-forward ']'
bind -T copyModeMultiKey_i ] send-keys -X clear-selection \; send-keys -X jump-to-backward '[' \; send-keys -X begin-selection \; send-keys -X jump-to-forward ']'
bind -T copyModeMultiKey_i < send-keys -X clear-selection \; send-keys -X jump-to-backward '<' \; send-keys -X begin-selection \; send-keys -X jump-to-forward '>'
bind -T copyModeMultiKey_i > send-keys -X clear-selection \; send-keys -X jump-to-backward '<' \; send-keys -X begin-selection \; send-keys -X jump-to-forward '>'
bind -T copyModeMultiKey_i ` send-keys -X clear-selection \; send-keys -X jump-to-backward '`' \; send-keys -X begin-selection \; send-keys -X jump-to-forward '`'
bind -T copyModeMultiKey_i \' send-keys -X clear-selection \; send-keys -X jump-to-backward "'" \; send-keys -X begin-selection \; send-keys -X jump-to-forward "'"
bind -T copyModeMultiKey_i \" send-keys -X clear-selection \; send-keys -X jump-to-backward '"' \; send-keys -X begin-selection \; send-keys -X jump-to-forward '"'
# bind -T copyModeMultiKey_i l send-keys -X clear-selection \; send-keys -X back-to-indentation \; send-keys -X begin-selection \; send-keys -X end-of-line \; send-keys -X cursor-left \; send-keys -X other-end

bind-key -T copy-mode-vi "v" send -X begin-selection
bind-key -T copy-mode-vi "V" send-keys -X select-line
# bind-key -T copy-mode-vi "C-v" send -X rectangle-toggle
bind-key -T copy-mode-vi 'C-v' send-keys -X begin-selection \; send-keys -X rectangle-toggle
# copy string and not exit
bind-key -T copy-mode-vi "y" send -X copy-selection \; display-message "Copied to clipboard"
# copy string and exit
# bind-key -T copy-mode-vi "y" send -X copy-selection-and-cancel \; display-message "Copied to clipboard"
bind-key -T copy-mode-vi "Y" send-keys -X copy-pipe-end-of-line \; display-message "Copied to clipboard"
# exit copy mode on common vi insert-mode keys
bind-key -T copy-mode-vi 'a' send -X cancel
bind-key -T copy-mode-vi 'A' send -X cancel
# bind-key -T copy-mode-vi 'i' send -X cancel
bind-key -T copy-mode-vi 'I' send -X cancel
bind-key -T copy-mode-vi 'o' send -X cancel
bind-key -T copy-mode-vi 'O' send -X cancel
# bind-key -T copy-mode-vi 'Escape' send -X cancel

# smart Escape & Ctrl-c behavior (if select then disable select else cancel)
bind-key -T copy-mode-vi Escape if-shell -F '#{selection_active}' 'send-keys -X clear-selection' 'send-keys -X cancel'
bind-key -T copy-mode-vi "C-c" if-shell -F '#{selection_active}' 'send-keys -X clear-selection' 'send-keys -X cancel'
# support search
bind-key -T copy-mode-vi * if-shell -F '#{selection_active}' '' 'send-keys -X select-word'\; send-keys -X pipe 'xargs -0 tmux send-keys -X search-forward-text; tmux send-keys -X search-reverse'  # faster ;n but does not restore view, needs to keep 'search-reverse' in 'pipe' to work correctly
bind-key -T copy-mode-vi \# if-shell -F '#{selection_active}' '' 'send-keys -X select-word'\; send-keys -X pipe 'xargs -0 tmux send-keys -X search-backward-text; tmux send-keys -X search-reverse'
# open file manager
# bind-key -T copy-mode-vi C-o display-popup -d '#{pane_current_path}' -h 90% -w 95% -E 'yazi'

# mouse click to select work
bind -n DoubleClick1Pane
unbind -T copy-mode-vi DoubleClick1Pane
bind -n SecondClick1Pane \
    select-pane \; \
    copy-mode -e \; \
    send-keys -X select-word \; \
    run-shell -d 0.1 \; \
    send-keys -X copy-selection-no-clear \; display-message "Copied to clipboard"  # wait so it copies to system clipboard
bind -T copy-mode-vi SecondClick1Pane \
    select-pane \; \
    send-keys -X select-word \; \
    send-keys -X copy-selection-no-clear \; display-message "Copied to clipboard"
bind -T copy-mode-vi TripleClick1Pane \
    select-pane \; \
    send-keys -X select-line \; \
    send-keys -X copy-selection-no-clear \; display-message "Copied to clipboard"
bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-selection-no-clear \; display-message "Copied to clipboard"
bind -T copy-mode-vi MouseDown1Pane select-pane \; send -X clear-selection

bind -T copy-mode-vi g switch-client -T copyModeMultiKey_g
bind -T copyModeMultiKey_g g send-keys -X history-top
bind -T copyModeMultiKey_g a if-shell -F '#{selection_active}' '' 'send-keys -X select-word' \; send-keys -X pipe 'xargs -I {} tmux new-window -c "#{pane_current_path}" "git add \"{}\""' \; display 'git add'
# bind -T copyModeMultiKey_g r if-shell -F '#{selection_active}' '' 'send-keys -X select-word' \; send-keys -X pipe 'xargs -I {} tmux new-window -c "#{pane_current_path}" "git reset \"{}\""' \; display 'git reset'
# bind -T copyModeMultiKey_g s if-shell -F '#{selection_active}' '' 'send-keys -X select-word' \; send-keys -X pipe 'xargs -I {} tmux display-popup -d "#{pane_current_path}" "git status \"{}\"; read"'
# bind -T copyModeMultiKey_g d if-shell -F '#{selection_active}' '' 'send-keys -X select-word' \; send-keys -X pipe 'xargs -I {} tmux new-window -a -c "#{pane_current_path}" "git diff \"{}\" | delta --line-numbers"'
# bind -T copyModeMultiKey_g f if-shell -F '#{selection_active}' '' 'send-keys -X select-word' \; send-keys -X pipe "awk -F: -vNEXTLINE=\"$(tmux capture-pane -p -S $((#{copy_cursor_y} - #{scroll_position} + 1)) -E $((#{copy_cursor_y} - #{scroll_position} + 1)) | grep -o '^[0-9]\\+:')\" '{if($2!=\"\") line=\" +\"$2; else if(NEXTLINE!=\"\") line=\" +\"NEXTLINE; else line=\"\"; print \"$EDITOR \" $1 line}' | xargs -I {} tmux new-window -a -c '#{pane_current_path}' {}"  # edit file or file:line under cursor or selection, also goes to line if next line starts with "<number>:" (from ripgrep results)
# bind -T copyModeMultiKey_g x if-shell -F '#{selection_active}' '' 'send-keys -X select-word' \; if-shell 'test -n "$SSH_CLIENT"' 'send-keys -X copy-selection' "send-keys -X pipe 'xargs -I {} tmux new-window -c \"#{pane_current_path}\" \"open \\\"{}\\\"\"'"
# bind -T copyModeMultiKey_g o if-shell -F '#{selection_active}' '' 'send-keys -X select-word' \; send-keys -X pipe 'sed -e "s/:$//" | xargs -I {} tmux new-window -c "#{pane_current_path}" "code --goto \"{}\""'

# zz zt zb like vim
bind -T copy-mode-vi z switch-client -T copyModeMultiKey_z
bind -T copyModeMultiKey_z z if-shell '[ $(((#{pane_height}-1)/2)) -ne #{copy_cursor_y} ]' {
  if-shell '[ $(((#{pane_height}-1)/2)) -gt #{copy_cursor_y} ]' {
    run-shell 'tmux send-keys -X -N $(((#{pane_height}-1)/2-#{copy_cursor_y})) scroll-up'
    run-shell 'tmux send-keys -X -N $(((#{pane_height}-1)/2-#{copy_cursor_y})) cursor-down'
  } {
    run-shell 'tmux send-keys -X -N $((#{copy_cursor_y}-(#{pane_height}-1)/2)) scroll-down'
    if-shell -F '#{copy_cursor_y}' 'run-shell "tmux send-keys -X -N $((#{copy_cursor_y}-(#{pane_height}-1)/2)) cursor-up"'
  }
}
bind -T copyModeMultiKey_z t if-shell '[ #{copy_cursor_y} -gt 0 ]' {
  run-shell 'tmux send-keys -X -N #{copy_cursor_y} scroll-down'
  if-shell -F '#{copy_cursor_y}' 'run-shell "tmux send-keys -X -N #{copy_cursor_y} cursor-up"'
}
bind -T copyModeMultiKey_z b if-shell '[ $((#{pane_height}-1)) -gt #{copy_cursor_y} ]' {
  run-shell 'tmux send-keys -X -N $((#{pane_height}-1-#{copy_cursor_y})) scroll-up'
  run-shell 'tmux send-keys -X -N $((#{pane_height}-1-#{copy_cursor_y})) cursor-down'
}

# ref: https://gist.github.com/LintaoAmons/22f6184b26bd5b93d8fe9f9276f50f75
bind-key -n M-g run-shell -b "\
if test 1 -eq #{==:#{session_name},popup} ; then \
    tmux detach-client; \
else \
    tmux popup -d \"#{pane_current_path}\" -xC -yC -w90% -h90% -E \"tmux new-session -A -s popup\"; \
fi\
"


# vertical split (prefix -)
# unbind '"'
bind '-' split-window -v -c "#{pane_current_path}"
# horizontal split (prefix |)
# unbind %
bind '\' split-window -h -c "#{pane_current_path}"
bind 'BSpace' split-window -h -c "#{pane_current_path}"

# move pane in one window
bind-key -r ',' swap-pane -U
bind-key -r '.' swap-pane -D
bind-key -r '{' swap-pane -U # tmux default keymap
bind-key -r '}' swap-pane -D # tmux default keymap
# move window
bind-key -r '<' swap-window -t -1 \; select-window -t -1
bind-key -r '>' swap-window -t +1 \; select-window -t +1
# move pane between two window (Ref: https://unix.stackexchange.com/questions/14300/moving-tmux-pane-to-window)
bind-key M command-prompt -p "join pane from:"  "join-pane -s ':%%'"
bind-key m command-prompt -p "send pane to:" "run-shell '$SCRIPTS_PATH/smart-join-pane.sh \"%%\"'"

# rename window
bind-key r command-prompt -I "#W" -p "#[fg=red](rename-window)" "rename-window '%%'"
# rename pane  
bind-key t command-prompt -I "#T" -p "#[fg=red](rename-pane)" "select-pane -T '%%'"
# rename session
bind-key $ command-prompt -I "#S" -p "#[fg=red](rename-session)" "rename-session '%%'"


# set Alt+num goto window num
bind -n M-1 select-window -t 1
bind -n M-2 select-window -t 2
bind -n M-3 select-window -t 3
bind -n M-4 select-window -t 4
bind -n M-5 select-window -t 5
bind -n M-6 select-window -t 6
bind -n M-7 select-window -t 7
bind -n M-8 select-window -t 8
bind -n M-9 select-window -t 9

# kill pane
unbind q 
bind-key q kill-pane

# kill window
unbind Q 
bind-key Q confirm kill-window

# resize pane
bind-key -n C-Left  "resize-pane -L 5"
bind-key -n C-Right "resize-pane -R 5"
bind-key -n C-Up    "resize-pane -U 5"
bind-key -n C-Down  "resize-pane -D 5"

# use keymap with vim
# is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
# bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h' { if -F '#{pane_at_left}' '' 'select-pane -L' }
# bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j' { if -F '#{pane_at_bottom}' '' 'select-pane -D' }
# bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k' { if -F '#{pane_at_top}' '' 'select-pane -U' }
# bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l' { if -F '#{pane_at_right}' '' 'select-pane -R' }
# bind-key -T copy-mode-vi 'C-h' if -F '#{pane_at_left}' '' 'select-pane -L'
# bind-key -T copy-mode-vi 'C-j' if -F '#{pane_at_bottom}' '' 'select-pane -D'
# bind-key -T copy-mode-vi 'C-k' if -F '#{pane_at_top}' '' 'select-pane -U'
# bind-key -T copy-mode-vi 'C-l' if -F '#{pane_at_right}' '' 'select-pane -R'

# start window numbers at 1 to match keyboard order with tmux order
set -g base-index 1
# start pane numbers at 1 to match keyboard order with tmux order
setw -g pane-base-index 1
# renumber windows sequentially after closing any of them
set -g renumber-windows on
# monitor windows for activity
setw -g monitor-activity on
# don't wait for escape sequences
set -sg escape-time 0
# display pane numbers for longer
set -g display-panes-time 2000
# increase scrollback lines
set -g history-limit 65536

bind S set-window-option synchronize-panes

# prefix+@ breaks current pane into separate window
# join a pane/window from the current session into the current window
bind @ command-prompt -p "create pane from:" "join-pane -s ':%%'"

bind-key "?" display-popup -w 100% -h 100% -E 'comm -23 <(tmux list-keys | sort) <(tmux -L test -f /dev/null list-keys | sort) | fzf -e -i --height="100%" --preview="echo {}" --preview-window="wrap" --prompt="tmux hotkeys: " --info=inline --layout=reverse --tiebreak=index --header "prefix=yes-prefix root=no-prefix" > /dev/null'

#🔽🔽🔽
# set status bar
set -g status-interval 2 # 状态栏刷新时间
set -g status-justify left # 状态栏列表左对齐 left/centre/right
setw -g monitor-activity on # 非当前窗口有内容更新时在状态栏通知
set -g status-left-length 50
set -g status-right-length 50
# set -g status-left "#[fg=black,bg=colour4][#{session_name}]#[fg=colour4,bg=colour147] #[align=centre]#[fg=black,bg=colour147]#H"  
# set middle not show when in popup
set -g status-left "#[fg=white,bg=red,bold]#{?synchronize-panes,[SYNC],}#[fg=black,bg=colour4,nobold][#{session_name}]#[fg=colour4,bg=colour147] #[align=centre]#[fg=black,bg=colour147]#{?#{==:#{session_name},popup},,#{?#{==:#{TMUX_HOST_NAME},},#H,#{TMUX_HOST_NAME}}}"

# set-option -g status-right '#(echo "123")'
# $(echo $(( `cat /sys/class/thermal/thermal_zone0/temp` / 1000)))
# #(echo $(( `cat /sys/class/thermal/thermal_zone0/temp` / 1000))) 
# set -g status-right '#[fg=yellow,bg=colour147]#[fg=black,bg=yellow] #{battery_icon}#{battery_percentage} #[bg=yellow]#{cpu_fg_color}\
# #{cpu_bg_color}#[fg=black] #{cpu_icon}#{cpu_percentage} \
# #{cpu_bg_color}#[fg=pink]\
# #[fg=black,bg=pink] 🕒%a %h-%d %H:%M '
# set right not show when in popup
set -g status-right "#{?#{==:#{session_name},popup},,#[fg=yellow,bg=colour147]#[fg=black,bg=yellow] #{battery_icon}#{battery_percentage} #[bg=yellow]#{cpu_fg_color}#{cpu_bg_color}#[fg=black] #{cpu_icon}#{cpu_percentage} #{cpu_bg_color}#[fg=pink]#[fg=black,bg=pink] 🕒%a %h-%d %H:%M }"
#🔼🔼🔼


#🔽🔽🔽
# set tpm plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
# Other examples:
# set -g @plugin 'github_username/plugin_name'
# set -g @plugin 'github_username/plugin_name#branch'
# set -g @plugin 'git@github.com:user/plugin'
# set -g @plugin 'git@bitbucket.com:user/plugin'
set -g @plugin 'tmux-plugins/tmux-cpu'
set -g @plugin 'tmux-plugins/tmux-battery'

# set -g @plugin 'jaclu/tmux-menus'

set -g @plugin 'mrjones2014/smart-splits.nvim' 
set -g @smart-splits_move_left_key  'C-h'
set -g @smart-splits_move_down_key  'C-j'
set -g @smart-splits_move_up_key    'C-k'
set -g @smart-splits_move_right_key 'C-l'
set -g @smart-splits_no_wrap true


set -g @plugin 'tmux-plugins/tmux-open' 
set -g @plugin 'trevarj/tmux-open-nvim'
set -g @open 'C-o'
set -g @open-editor 'o'
set -g @open-O 'https://www.google.com/search?q='


# prefix+C-s save prefix+C-r reload
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @resurrect-capture-pane-contents 'on'
# 默认恢复 @resurrect-default-processes="vi vim nvim emacs man less more tail top htop irssi weechat mutt"
set -g @resurrect-processes "ssh btop ranger yazi lazygit gitui fzf"
set -g @resurrect-strategy-vim 'session'
set -g @resurrect-strategy-nvim 'session'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @continuum-restore 'off' # last saved environment is automatically restored when tmux is started.
set -g @continuum-boot 'off'    # automatic tmux start

set -g @plugin 'laktak/extrakto'
set -g @extrakto_copy_key "tab"      # use tab to copy to clipboard
set -g @extrakto_insert_key "enter"  # use enter to insert selection
set -g @extrakto_fzf_unset_default_opts "false"  # keep our custom FZF_DEFAULT_OPTS
set -g @extrakto_clip_tool_run "tmux_osc52"

set -g @plugin 'Morantron/tmux-fingers'
set -g @fingers-key s
set -g @fingers-jump-key '' # disable keymap `prefix+J`

# set -g @plugin 'tmux-plugins/tmux-yank'
# set -g @plugin 'CrispyConductor/tmux-copy-toolkit'
# set -g @copytk-copy-command "xclip -selection c"
# set -g @copytk-copy-command "tmux load-buffer -; tmux save-buffer - | xclip -selection c"
# set -g @copytk-no-default-matches off

#   	   
# 状态栏当前窗口名称格式(#I：序号，#w：窗口名称，#F：间隔符)
# set -wg window-status-format "#I:#W " # 状态栏窗口名称格式
# set -wg window-status-current-format "#I:#W#F " # 

# 窗口状态格式设置
set -wg window-status-separator " "  # 默认分隔符
# 普通窗口样式
set -wg window-status-format "#[fg=black,bg=colour147]#I:#W"
# 当前窗口样式
set -wg window-status-current-format "#[fg=colour147,bg=colour222] #[fg=colour162,bg=colour222]#I:#W #[fg=colour222,bg=colour147]"
# 活动窗口(有活动的窗格)样式
set -wg window-status-activity-style "fg=white,bg=colour147"

set -g @cpu_low_icon "🔥" # icon when cpu is low
set -g @cpu_medium_icon "🔥" # icon when cpu is medium
set -g @cpu_high_icon "🔥" # icon when cpu is high
set -g @cpu_percentage_format "%2.0f%%"
set -g @cpu_low_bg_color "#[bg=green]" # background color when cpu is low
set -g @cpu_low_fg_color "#[fg=green]"
set -g @cpu_medium_bg_color "#[bg=orange]" # background color when cpu is medium
set -g @cpu_medium_fg_color "#[fg=orange]"
set -g @cpu_high_bg_color "#[bg=red]" # background color when cpu is high
set -g @cpu_high_fg_color "#[fg=red]"

# run-shell ~/.config/tmux/plugins/tmux-cpu/cpu.tmux
# run-shell ~/.config/tmux/plugins/tmux-battery/battery.tmux

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
# run '~/.tmux/plugins/tpm/tpm'
run '~/.config/tmux/plugins/tpm/tpm'
#🔼🔼🔼
